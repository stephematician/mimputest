% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/measure.R
\name{measure_degenerate}
\alias{measure_degenerate}
\title{Measure if reached limit of iterations.}
\usage{
measure_degenerate(x_sample, y_sample, data, indicator, env = parent.frame())
}
\arguments{
\item{x_sample}{named list: the imputed values of the missing cases within
each variable from one iteration of the missForest algorithm.}

\item{y_sample}{named list: the imputed values from the following (or
preceding) iteration for \code{x_sample} with the same format as \code{x_sample}.}

\item{env}{environment; environment of the calling function, usually
\code{\link[=sampler_loop]{sampler_loop()}}.}
}
\value{
named numeric; \code{measure} equal to zero when the limit has been
reached or exceeded, otherwise the number (or index) of the current
iteration.
}
\description{
A degenerate 'measure' of convergence, which simply returns whether to
continue if the limit of the number of iterations has been reached, or not.
}
\examples{
\dontrun{
# simply pass to smirf
smirf(iris, stop_measure=measure_degenerate)
}

}
\seealso{
\code{\link[=sampler_loop]{sampler_loop()}}
}
